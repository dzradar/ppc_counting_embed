<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\adt3102_gesture_far.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\adt3102_gesture_far.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Sun Nov 21 19:56:53 2021
<BR><P>
<H3>Maximum Stack Usage =       2592 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; procCounting &rArr; detectPeaks &rArr; doAngFft &rArr; asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">PORT0_10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">PORT0_10_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from adt3102_inthandler.o(i.NMI_Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[20]">PORT0_10_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[21]">PORT0_11_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[22]">PORT0_12_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[23]">PORT0_13_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[24]">PORT0_14_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[25]">PORT0_15_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1c]">PORT0_6_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1d]">PORT0_7_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1e]">PORT0_8_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1f]">PORT0_9_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from adt3102_system.o(i.SystemInit) referenced from startup_cmsdk_cm3.o(.text)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cmsdk_cm3.o(.text)
 <LI><a href="#[19]">dma0Handler</a> from adt3102_inthandler.o(i.dma0Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1a]">dma1Handler</a> from adt3102_inthandler.o(i.dma1Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[f]">dualtimer0Handler</a> from adt3102_inthandler.o(i.dualtimer0Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[2a]">euclideanDist</a> from db_scan.o(i.euclideanDist) referenced from proc_counting.o(i.procCounting)
 <LI><a href="#[17]">fftHandler</a> from adt3102_inthandler.o(i.fftHandler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[29]">fputc</a> from adt3102_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[18]">gpioHandler</a> from adt3102_inthandler.o(i.gpioHandler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[15]">i2c0Handler</a> from adt3102_inthandler.o(i.i2c0Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[16]">i2c1Handler</a> from adt3102_inthandler.o(i.i2c1Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[11]">pmuHandler</a> from adt3102_inthandler.o(i.pmuHandler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[14]">rtcHandler</a> from adt3102_inthandler.o(i.rtcHandler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[12]">spi0Handler</a> from adt3102_inthandler.o(i.spi0Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[13]">spi1Handler</a> from adt3102_inthandler.o(i.spi1Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[d]">timer0Handler</a> from adt3102_inthandler.o(i.timer0Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[e]">timer1Handler</a> from adt3102_inthandler.o(i.timer1Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1b]">trngHandler</a> from adt3102_inthandler.o(i.trngHandler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[a]">uart0Handler</a> from adt3102_inthandler.o(i.uart0Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[b]">uart1Handler</a> from adt3102_inthandler.o(i.uart1Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[c]">uart2Handler</a> from adt3102_inthandler.o(i.uart2Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[10]">uartOverflowHandler</a> from adt3102_inthandler.o(i.uartOverflowHandler) referenced from startup_cmsdk_cm3.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[50]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fe]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ff]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[100]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[101]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[102]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PORT0_10_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PORT0_11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PORT0_12_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PORT0_13_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PORT0_14_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PORT0_15_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PORT0_6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PORT0_7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PORT0_8_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PORT0_9_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_track_update
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_still_obj
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_track_clean
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_still_obj
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_track_init
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendSimple
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_InitStatic
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[30]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpsilonNeighbours
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createNode
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phaseCal
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPeaks
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complexMultiply
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnLock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpsilonNeighbours
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phaseCal
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complexMultiply
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnLock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmodf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phaseCal
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complexMultiply
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phaseCal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
</UL>

<P><STRONG><a name="[6f]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPeaks
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[108]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnLock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPeaks
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtuneRead
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtuneRead
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[63]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[109]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPoints
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phaseCal
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complexMultiply
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnLock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpsilonNeighbours
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPeaks
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtuneRead
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complexMultiply
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpsilonNeighbours
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPeaks
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtuneRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnLock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpsilonNeighbours
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPeaks
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtuneRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnLock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[10c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[10d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[10f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[33]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>

<P><STRONG><a name="[4a]"></a>_fsqrt</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[4b]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[4c]"></a>_frem</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, frem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _frem &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmodf
</UL>

<P><STRONG><a name="[3c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[3b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
</UL>

<P><STRONG><a name="[4d]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[4e]"></a>_drem</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, drem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d9]"></a>__ARM_dcmp4</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dcmp4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_dcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmin
</UL>

<P><STRONG><a name="[110]"></a>_dcmp4</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dcmp4.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[111]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[e3]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adt3102_system.o(i.MY_NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adt3102_system.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>TF_AddIdListener</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tinyframe.o(i.TF_AddIdListener), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendFrame_Begin
</UL>

<P><STRONG><a name="[54]"></a>TF_DeInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tinyframe.o(i.TF_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TF_DeInit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyFramefTx
</UL>

<P><STRONG><a name="[56]"></a>TF_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tinyframe.o(i.TF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TF_Init &rArr; TF_InitStatic &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_InitStatic
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyFramefTx
</UL>

<P><STRONG><a name="[57]"></a>TF_InitStatic</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, tinyframe.o(i.TF_InitStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TF_InitStatic &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_Init
</UL>

<P><STRONG><a name="[5f]"></a>TF_Send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tinyframe.o(i.TF_Send))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendSimple
</UL>

<P><STRONG><a name="[5e]"></a>TF_SendSimple</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, tinyframe.o(i.TF_SendSimple))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TF_SendSimple
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_Send
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyFramefTx
</UL>

<P><STRONG><a name="[5d]"></a>TF_WriteImpl</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tinyframe.o(i.TF_WriteImpl), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendFrame_End
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendFrame_Chunk
</UL>

<P><STRONG><a name="[60]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[112]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[53]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPeaks
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_InitStatic
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_AddIdListener
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendFrame_Begin
</UL>

<P><STRONG><a name="[113]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[114]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[67]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[bb]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[115]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[62]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[64]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[65]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[66]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[69]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[6a]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[6b]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[6c]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[6d]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[68]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[6e]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[70]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[71]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmodf
</UL>

<P><STRONG><a name="[72]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[73]"></a>__mathlib_rredf2</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[116]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[117]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[118]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b7]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmodf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[ce]"></a>absAdt3102</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, adt3102_dsp.o(i.absAdt3102))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = absAdt3102
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>adcBiasSetting</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, adt3102_adc.o(i.adcBiasSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adcBiasSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102AdcSetting
</UL>

<P><STRONG><a name="[81]"></a>adcClkSwitch</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adt3102_adc.o(i.adcClkSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102AdcSetting
</UL>

<P><STRONG><a name="[7f]"></a>adcEnable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, adt3102_adc.o(i.adcEnable))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102AdcSetting
</UL>

<P><STRONG><a name="[84]"></a>adcFirDownsample</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, adt3102_adc.o(i.adcFirDownsample))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102AdcSetting
</UL>

<P><STRONG><a name="[82]"></a>adcSampleInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adt3102_adc.o(i.adcSampleInit))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102AdcSetting
</UL>

<P><STRONG><a name="[7a]"></a>adcSampleStart</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, adt3102_adc.o(i.adcSampleStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = adcSampleStart &rArr; dmaConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaDisable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>adcWnpara</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adt3102_adc.o(i.adcWnpara))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102AdcSetting
</UL>

<P><STRONG><a name="[7e]"></a>adt3102AdcSetting</STRONG> (Thumb, 108 bytes, Stack size 60 bytes, adt3102_adc.o(i.adt3102AdcSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = adt3102AdcSetting &rArr; adcBiasSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSampleConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcWnpara
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcSampleInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcFirDownsample
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcEnable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcClkSwitch
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcBiasSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>adt3102Analog</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, adt3102_system.o(i.adt3102Analog))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adt3102Analog &rArr; rfPhaseShiftLUT &rArr; delayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baseBandBiasSetting
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPaEnable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfVgaGainSetting
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfTiaGainSetting
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPaBias
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiaHpfConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfPgaGainCalSetting
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfPgaGainCalEnable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcHpfConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgaLpfConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lnaRegularBias
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lnaDacBias
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxLnaEnable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfVgaEnable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfVgaDacBias
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfTiaEnable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfTiaDacBias
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfPhaseShiftLUT
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgaHpfConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>adt3102DigiInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, adt3102_system.o(i.adt3102DigiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adt3102DigiInit &rArr; rc32kCalibration &rArr; delayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInterrupt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioDirection
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32kCalibration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcuSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>adt3102PowerSw</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, adt3102_pmu.o(i.adt3102PowerSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adt3102PowerSw &rArr; plliLDOEnable &rArr; delayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioOutput
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioDirection
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnVcoConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnPllConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plliLDOEnable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dacEnBias1Pd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baseband18LDO
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>adt3102RfInit</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, adt3102_system.o(i.adt3102RfInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = adt3102RfInit &rArr; pllnLock &rArr; fmcwConfig &rArr; round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnLock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnDacSetting
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plliLock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plliDacSetting
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwModeSel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfbuff20G
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfPhaseShiftLUT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfBuff77GEnable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plliConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias20GTo80G
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>appendAtEnd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, db_scan.o(i.appendAtEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = appendAtEnd &rArr; createNode &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createNode
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spread
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpsilonNeighbours
</UL>

<P><STRONG><a name="[b6]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
</UL>

<P><STRONG><a name="[b9]"></a>asinf</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, asinf.o(i.asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = asinf &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phaseCal
</UL>

<P><STRONG><a name="[bc]"></a>assert_failed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adt3102_uart.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[bd]"></a>atan2f</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = atan2f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phaseCal
</UL>

<P><STRONG><a name="[8d]"></a>baseBandBiasSetting</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adt3102_adc.o(i.baseBandBiasSetting))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[a5]"></a>baseband18LDO</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, adt3102_tx.o(i.baseband18LDO))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102PowerSw
</UL>

<P><STRONG><a name="[b3]"></a>bias20GTo80G</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, adt3102_tx.o(i.bias20GTo80G))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bias20GTo80G
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
</UL>

<P><STRONG><a name="[be]"></a>complexMultiply</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, proc_counting.o(i.complexMultiply))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = complexMultiply &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
</UL>

<P><STRONG><a name="[c0]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPeaks
</UL>

<P><STRONG><a name="[c1]"></a>cosf</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
</UL>

<P><STRONG><a name="[b5]"></a>createNode</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, db_scan.o(i.createNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = createNode &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendAtEnd
</UL>

<P><STRONG><a name="[a6]"></a>dacEnBias1Pd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adt3102_tx.o(i.dacEnBias1Pd))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102PowerSw
</UL>

<P><STRONG><a name="[85]"></a>dataSampleConfig</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, adt3102_adc.o(i.dataSampleConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dataSampleConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102AdcSetting
</UL>

<P><STRONG><a name="[c3]"></a>dbScan</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, db_scan.o(i.dbScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dbScan &rArr; expand &rArr; spread &rArr; getEpsilonNeighbours &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCounting
</UL>

<P><STRONG><a name="[7d]"></a>delayUs</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, adt3102_system.o(i.delayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dualtimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch125MHclk
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102PowerSw
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcSampleStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtuneRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnLock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plliLock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfPhaseShiftLUT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plliLDOEnable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32kCalibration
</UL>

<P><STRONG><a name="[c6]"></a>destroyEpsilonNeighbours</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, db_scan.o(i.destroyEpsilonNeighbours))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = destroyEpsilonNeighbours &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spread
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpsilonNeighbours
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand
</UL>

<P><STRONG><a name="[c7]"></a>detectPeaks</STRONG> (Thumb, 612 bytes, Stack size 104 bytes, proc_counting.o(i.detectPeaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = detectPeaks &rArr; doAngFft &rArr; asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCounting
</UL>

<P><STRONG><a name="[19]"></a>dma0Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.dma0Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>dma1Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.dma1Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>dmaConfig</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, adt3102_dma.o(i.dmaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dmaConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftSingle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memScheduling
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcSampleStart
</UL>

<P><STRONG><a name="[7c]"></a>dmaDisable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, adt3102_dma.o(i.dmaDisable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftSingle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memScheduling
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcSampleStart
</UL>

<P><STRONG><a name="[c8]"></a>doAngFft</STRONG> (Thumb, 854 bytes, Stack size 2248 bytes, proc_counting.o(i.doAngFft))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = doAngFft &rArr; asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phaseCal
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftSingle
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complexMultiply
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absAdt3102
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPeaks
</UL>

<P><STRONG><a name="[ec]"></a>dopplerSwapMimo</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, proc_counting.o(i.dopplerSwapMimo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dopplerSwapMimo
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>dualtimer0Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.dualtimer0Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>dualtimerInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adt3102_timer.o(i.dualtimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>

<P><STRONG><a name="[2a]"></a>euclideanDist</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, db_scan.o(i.euclideanDist))
<BR>[Address Reference Count : 1]<UL><LI> proc_counting.o(i.procCounting)
</UL>
<P><STRONG><a name="[c4]"></a>expand</STRONG> (Thumb, 174 bytes, Stack size 96 bytes, db_scan.o(i.expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = expand &rArr; spread &rArr; getEpsilonNeighbours &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spread
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpsilonNeighbours
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroyEpsilonNeighbours
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbScan
</UL>

<P><STRONG><a name="[17]"></a>fftHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.fftHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>fftProcess</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, adt3102_dsp.o(i.fftProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = fftProcess &rArr; fftSingle &rArr; dmaConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftSingle
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>fftSingle</STRONG> (Thumb, 220 bytes, Stack size 72 bytes, adt3102_dsp.o(i.fftSingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = fftSingle &rArr; dmaConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaDisable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocityFftProcess
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftProcess
</UL>

<P><STRONG><a name="[af]"></a>fmcwConfig</STRONG> (Thumb, 988 bytes, Stack size 80 bytes, adt3102_tx.o(i.fmcwConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fmcwConfig &rArr; round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwEnmode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmin
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmodf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnLock
</UL>

<P><STRONG><a name="[d8]"></a>fmcwEnmode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, adt3102_tx.o(i.fmcwEnmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fmcwEnmode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnLock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
</UL>

<P><STRONG><a name="[b0]"></a>fmcwModeSel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, adt3102_tx.o(i.fmcwModeSel))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
</UL>

<P><STRONG><a name="[d2]"></a>fmin</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fmin.o(i.fmin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fmin &rArr; __ARM_dcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_dcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
</UL>

<P><STRONG><a name="[d5]"></a>fmod</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fmod.o(i.fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fmod &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
</UL>

<P><STRONG><a name="[d4]"></a>fmodf</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fmodf.o(i.fmodf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fmodf &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
</UL>

<P><STRONG><a name="[29]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adt3102_uart.o(i.fputc))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[da]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[55]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroyEpsilonNeighbours
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendAtEnd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_DeInit
</UL>

<P><STRONG><a name="[db]"></a>func_track_clean</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, track.o(i.func_track_clean))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_step
</UL>

<P><STRONG><a name="[dc]"></a>func_track_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, track.o(i.func_track_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_track_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>func_track_update</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, track.o(i.func_track_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_track_update
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_step
</UL>

<P><STRONG><a name="[cf]"></a>getEpsilonNeighbours</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, db_scan.o(i.getEpsilonNeighbours))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = getEpsilonNeighbours &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroyEpsilonNeighbours
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendAtEnd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spread
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand
</UL>

<P><STRONG><a name="[fc]"></a>gpadcEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adt3102_adc.o(i.gpadcEnable))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtuneRead
</UL>

<P><STRONG><a name="[9d]"></a>gpioDirection</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adt3102_gpio.o(i.gpioDirection))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102PowerSw
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102DigiInit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcuSleepConfig
</UL>

<P><STRONG><a name="[18]"></a>gpioHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.gpioHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>gpioOutput</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adt3102_gpio.o(i.gpioOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpioOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1Handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102PowerSw
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcuSleepConfig
</UL>

<P><STRONG><a name="[15]"></a>i2c0Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.i2c0Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>i2c1Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.i2c1Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>ledInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, adt3102_system.o(i.ledInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ledInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>lnaDacBias</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, adt3102_rx.o(i.lnaDacBias))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lnaDacBias
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[8b]"></a>lnaRegularBias</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adt3102_rx.o(i.lnaRegularBias))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[e1]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[e2]"></a>log10</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, log10.o(i.log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 1234 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = main &rArr; procCounting &rArr; detectPeaks &rArr; doAngFft &rArr; asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocityFftProcess
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPaEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_step
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyFramefTx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOff
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch125MHclk
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInterrupt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfVgaGainSetting
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfTiaGainSetting
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCounting
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfDebug
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memScheduling
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioDirection
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_track_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftProcess
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dopplerSwapMimo
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102PowerSw
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102DigiInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102AdcSetting
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcSampleStart
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absAdt3102
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[31]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[9e]"></a>mcuSleepConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, adt3102_pmu.o(i.mcuSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mcuSleepConfig &rArr; gpioOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioOutput
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102DigiInit
</UL>

<P><STRONG><a name="[ea]"></a>memScheduling</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, adt3102_memscheduling.o(i.memScheduling))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = memScheduling &rArr; dmaConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaDisable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>mixerEnable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adt3102_rx.o(i.mixerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[c2]"></a>perror</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, perror.o(i.perror))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpsilonNeighbours
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createNode
</UL>

<P><STRONG><a name="[99]"></a>pgaHpfConfig</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, adt3102_rx.o(i.pgaHpfConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pgaHpfConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[98]"></a>pgaLpfConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adt3102_rx.o(i.pgaLpfConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[cc]"></a>phaseCal</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, adt3102_phase_cal.o(i.phaseCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = phaseCal &rArr; asinf &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
</UL>

<P><STRONG><a name="[aa]"></a>plliConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adt3102_tx.o(i.plliConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
</UL>

<P><STRONG><a name="[a9]"></a>plliDacSetting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adt3102_tx.o(i.plliDacSetting))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
</UL>

<P><STRONG><a name="[a2]"></a>plliLDOEnable</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, adt3102_tx.o(i.plliLDOEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plliLDOEnable &rArr; delayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102PowerSw
</UL>

<P><STRONG><a name="[ad]"></a>plliLock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, adt3102_tx.o(i.plliLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = plliLock &rArr; delayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
</UL>

<P><STRONG><a name="[ac]"></a>pllnConfig</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, adt3102_tx.o(i.pllnConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pllnConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnVcoEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
</UL>

<P><STRONG><a name="[ab]"></a>pllnDacSetting</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adt3102_tx.o(i.pllnDacSetting))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
</UL>

<P><STRONG><a name="[ae]"></a>pllnLock</STRONG> (Thumb, 408 bytes, Stack size 80 bytes, adt3102_tx.o(i.pllnLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pllnLock &rArr; fmcwConfig &rArr; round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vtuneRead
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwEnmode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
</UL>

<P><STRONG><a name="[a4]"></a>pllnPllConfig</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, adt3102_tx.o(i.pllnPllConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pllnPllConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102PowerSw
</UL>

<P><STRONG><a name="[a3]"></a>pllnVcoConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, adt3102_tx.o(i.pllnVcoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102PowerSw
</UL>

<P><STRONG><a name="[f3]"></a>pllnVcoEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adt3102_tx.o(i.pllnVcoEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnConfig
</UL>

<P><STRONG><a name="[11]"></a>pmuHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.pmuHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>pow</STRONG> (Thumb, 2478 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>printPoints</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, db_scan.o(i.printPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = printPoints &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCounting
</UL>

<P><STRONG><a name="[e7]"></a>printfDebug</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adt3102_uart.o(i.printfDebug))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>procCounting</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, proc_counting.o(i.procCounting))
<BR><BR>[Stack]<UL><LI>Max Depth = 2568<LI>Call Chain = procCounting &rArr; detectPeaks &rArr; doAngFft &rArr; asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPoints
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbScan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPeaks
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>rc32kCalibration</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, adt3102_pmu.o(i.rc32kCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rc32kCalibration &rArr; delayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102DigiInit
</UL>

<P><STRONG><a name="[97]"></a>rcHpfConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, adt3102_rx.o(i.rcHpfConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcHpfConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[b2]"></a>rfBuff77GEnable</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, adt3102_tx.o(i.rfBuff77GEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rfBuff77GEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
</UL>

<P><STRONG><a name="[94]"></a>rfPgaGainCalEnable</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, adt3102_rx.o(i.rfPgaGainCalEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rfPgaGainCalEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[95]"></a>rfPgaGainCalSetting</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, adt3102_rx.o(i.rfPgaGainCalSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rfPgaGainCalSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[9a]"></a>rfPhaseShiftLUT</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, adt3102_tx.o(i.rfPhaseShiftLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfPhaseShiftLUT &rArr; delayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[90]"></a>rfTiaDacBias</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adt3102_rx.o(i.rfTiaDacBias))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[8e]"></a>rfTiaEnable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, adt3102_rx.o(i.rfTiaEnable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[8f]"></a>rfTiaGainSetting</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, adt3102_rx.o(i.rfTiaGainSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rfTiaGainSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>rfVgaDacBias</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, adt3102_rx.o(i.rfVgaDacBias))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[91]"></a>rfVgaEnable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, adt3102_rx.o(i.rfVgaEnable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[92]"></a>rfVgaGainSetting</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, adt3102_rx.o(i.rfVgaGainSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rfVgaGainSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>rfbuff20G</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adt3102_tx.o(i.rfbuff20G))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102RfInit
</UL>

<P><STRONG><a name="[d3]"></a>round</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sAgc
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcwConfig
</UL>

<P><STRONG><a name="[14]"></a>rtcHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.rtcHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtcHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>rtcInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adt3102_rtc.o(i.rtcInit))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102DigiInit
</UL>

<P><STRONG><a name="[89]"></a>rxLnaEnable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adt3102_rx.o(i.rxLnaEnable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[e9]"></a>sAgc</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, adt3102_sagc.o(i.sAgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sAgc &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>setInterrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adt3102_system.o(i.setInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102DigiInit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>show_obj_cluster</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, track.o(i.show_obj_cluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = show_obj_cluster
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_step
</UL>

<P><STRONG><a name="[ca]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPeaks
</UL>

<P><STRONG><a name="[cb]"></a>sinf</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAngFft
</UL>

<P><STRONG><a name="[12]"></a>spi0Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.spi0Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>spi1Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.spi1Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>spread</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, db_scan.o(i.spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = spread &rArr; getEpsilonNeighbours &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpsilonNeighbours
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroyEpsilonNeighbours
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendAtEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand
</UL>

<P><STRONG><a name="[b8]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[ba]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[e4]"></a>switch125MHclk</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adt3102_system.o(i.switch125MHclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = switch125MHclk &rArr; delayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_plli
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>switch_to_plli</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adt3102_pmu.o(i.switch_to_plli))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch125MHclk
</UL>

<P><STRONG><a name="[96]"></a>tiaHpfConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, adt3102_rx.o(i.tiaHpfConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tiaHpfConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[d]"></a>timer0Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adt3102_inthandler.o(i.timer0Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer0Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>timer1Handler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, adt3102_inthandler.o(i.timer1Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer1Handler &rArr; gpioOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>timerInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adt3102_timer.o(i.timerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerInit &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>timerOff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adt3102_timer.o(i.timerOff))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0Handler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>tinyFramefTx</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tinyframe.o(i.tinyFramefTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tinyFramefTx &rArr; TF_Init &rArr; TF_InitStatic &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendSimple
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>track_step</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, track.o(i.track_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = track_step &rArr; tracking_all_clusters &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_all_clusters
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_obj_cluster
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_track_update
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_track_clean
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_still_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>tracking_all_clusters</STRONG> (Thumb, 2812 bytes, Stack size 1000 bytes, track.o(i.tracking_all_clusters))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = tracking_all_clusters &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_step
</UL>

<P><STRONG><a name="[1b]"></a>trngHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.trngHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>txPaBias</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, adt3102_tx.o(i.txPaBias))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
</UL>

<P><STRONG><a name="[87]"></a>txPaEnable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adt3102_tx.o(i.txPaEnable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt3102Analog
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>uart0Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.uart0Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>uart1Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.uart1Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>uart2Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.uart2Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>uartInit</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, adt3102_uart.o(i.uartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uartInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>uartOverflowHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adt3102_inthandler.o(i.uartOverflowHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>velocityFftProcess</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, adt3102_dsp.o(i.velocityFftProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = velocityFftProcess &rArr; fftSingle &rArr; dmaConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftSingle
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>vtuneRead</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, adt3102_tx.o(i.vtuneRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vtuneRead &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpadcEnable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllnLock
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[df]"></a>keep_still_obj</STRONG> (Thumb, 934 bytes, Stack size 80 bytes, track.o(i.keep_still_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = keep_still_obj
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_step
</UL>

<P><STRONG><a name="[59]"></a>TF_SendFrame</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tinyframe.o(i.TF_SendFrame), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendFrame_End
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendFrame_Chunk
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendFrame_Begin
</UL>

<P><STRONG><a name="[5a]"></a>TF_SendFrame_Begin</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tinyframe.o(i.TF_SendFrame_Begin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_AddIdListener
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendFrame
</UL>

<P><STRONG><a name="[5b]"></a>TF_SendFrame_Chunk</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tinyframe.o(i.TF_SendFrame_Chunk), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_WriteImpl
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendFrame
</UL>

<P><STRONG><a name="[5c]"></a>TF_SendFrame_End</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tinyframe.o(i.TF_SendFrame_End), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_WriteImpl
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_SendFrame
</UL>

<P><STRONG><a name="[75]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[61]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[78]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[77]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
